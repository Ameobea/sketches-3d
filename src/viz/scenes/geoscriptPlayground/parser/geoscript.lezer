@precedence {
  call
  unary
  fieldAccess @left
  mul @left
  add @left
  bitAnd @left
  compare @left
  and @left
  or @left
  bitOr @left
  assign @right
  range @left
  return @left
  cond
  statement
}

@skip { whitespace | LineComment }

@top Program {
  statement*
}

statement {
  ReturnStatement { "return" !return Expr? ";"? } |
  ExprStatement { Expr ";"? } |
  DeclarationStatement { Identifier TypeHint? "=" Expr ";"? }
}

TypeHint { ":" Identifier }

UnaryOp { "+" | "-" | "!" }

ParenthesizedExpr { "(" Expr ")" }
CallExpr { Identifier !call "(" commaSep<FunctionArg> ")" }
IfExpr { "if" !cond Expr BlockExpr ElseIfExpr* ElseExpr? }

FnArgDefaultValue { Identifier | literal | ParenthesizedExpr | CallExpr | BlockExpr | IfExpr }

ClosureParamList {
  Pipe commaSep<Parameter { Identifier TypeHint? ("=" FnArgDefaultValue)? }> Pipe
}

Expr {
  UnaryExpr { UnaryOp !unary Expr } |
  BinaryExpr |
  FieldAccessExpr |
  RangeExpr { Expr !range (".." | "..=") Expr } |
  CallExpr |
  literal |
  Identifier |
  ArrayExpr { "[" commaSep1<Expr>? "]" } |
  ClosureExpr { (LogicalOrOp TypeHint? Expr) | (ClosureParamList TypeHint? Expr) } |
  ParenthesizedExpr |
  BlockExpr |
  IfExpr
}

BlockExpr { "{" statement* "}" }
ElseIfExpr { "else if" !cond BlockExpr }
ElseExpr { "else" !cond BlockExpr }

FunctionArg {
  Expr | Kwarg { Identifier "=" Expr }
}

BinaryExpr {
  Expr !add ("+" | "-") Expr |
  Expr !mul ("*" | "/" | "%") Expr |
  Expr !bitAnd "&" Expr |
  Expr !bitOr Pipe Expr |
  Expr !bitOr "->" Expr |
  Expr !compare CompareOp Expr |
  Expr !and LogicalAndOp Expr |
  Expr !or LogicalOrOp Expr
}

FieldAccessExpr {
  Expr !fieldAccess "." Identifier
}

literal { Float | Integer | BoolLiteral | StringLiteral }

StringLiteral[isolate] { SingleQuoteStringLiteral | DoubleQuoteStringLiteral }

escapedDoubleQuote { "\\\"" }
escapedSingleQuote { "\\'" }

@skip {} {
  DoubleQuoteStringLiteral[isolate] { '"' (escapedDoubleQuote | doubleQuoteStringContent)* '"' }
  SingleQuoteStringLiteral[isolate] { "'" (escapedSingleQuote | singleQuoteStringContent)* "'" }
}

commaSep<Expr> { commaSep1<Expr>? }

commaSep1<Expr> { Expr ("," Expr?)* }

@external tokens literalTokens from "./tokens" { Float }

@tokens {
  whitespace { $[ \t\r\n] }

  Pipe { "|" }
  LogicalAndOp { "&&" }
  LogicalOrOp { "||" }
  CompareOp { "<" | ">" | ">=" | "<=" | "==" | "!=" }

  BoolLiteral { "true" | "false" }
  Integer { $[0-9]+ }

  LineComment[isolate] { "//" ![\n]* }

  @precedence { LineComment, "/" }

  Identifier { $[a-zA-Z_] $[a-zA-Z0-9_]* }

  @precedence { "return", "if", "else if", "else", BoolLiteral, Identifier }

  doubleQuoteStringContent { !["\\\n]+ }
  singleQuoteStringContent { !['\\\n]+ }

  "[" "]" "{" "}" "(" ")"
  ":" ","
  "=" ".." "..="
  "&" "!" "->" ";"
}

@external propSource geoscriptHighlighting from "./highlight"

@detectDelim
