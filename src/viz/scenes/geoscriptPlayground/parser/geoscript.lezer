@precedence {
  call
  unary
  fieldAccess @left
  mul @left
  add @left
  bitAnd @left
  bitOr @left
  compare @left
  and @left
  or @left
  assign @right
  range @left
  statement
}

@skip { whitespace | LineComment }

@top Program {
  statement*
}

statement {
  ExprStatement { expr ";"? } |
  DeclarationStatement { Identifier TypeHint? "=" expr ";"? }
}

TypeHint { ":" Identifier }

UnaryOp { "-" | "!" }

expr {
  UnaryExpr { UnaryOp !unary expr } |
  BinaryExpr |
  FieldAccessExpr |
  RangeExpr { expr !range (".." | "..=") expr } |
  CallExpr { Identifier !call "(" commaSep<FunctionArg> ")" } |
  literal |
  Identifier |
  ArrayExpr { "[" commaSep1<expr>? "]" } |
  ClosureExpr { "|" ClosureArgs "|" TypeHint? ClosureBody } |
  ParenthesizedExpr { "(" expr ")" }
}

FunctionArg {
  expr | Kwarg { Identifier "=" expr }
}

closureArg {
  Identifier TypeHint?
}

ClosureArgs { commaSep<closureArg> }

BinaryExpr {
  expr !add ("+" | "-") expr |
  expr !mul ("*" | "/" | "%") expr |
  expr !bitAnd "&" expr |
  expr !bitOr "|" expr |
  expr !bitOr "->" expr |
  expr !compare CompareOp expr |
  expr !and "&&" expr |
  expr !or "||" expr
}

FieldAccessExpr {
  expr !fieldAccess "." Identifier
}

ClosureBody {
  expr | ("{" statement* "}" )
}

literal { Float | Integer | BoolLiteral }

commaSep<expr> { commaSep1<expr>? }

commaSep1<expr> { expr ("," expr?)* }

@external tokens literalTokens from "./tokens" { Float }

@tokens {
  whitespace { $[ \t\r\n] }

  CompareOp { "<" | ">" | ">=" | "<=" | "==" | "!=" }

  BoolLiteral { "true" | "false" }
  Integer { $[0-9]+ }

  LineComment[isolate] { "//" ![\n]* }

  @precedence { LineComment, "/" }

  Identifier { $[a-zA-Z_] $[a-zA-Z0-9_]* }

  @precedence { BoolLiteral, Identifier }

  "[" "]" "{" "}" "(" ")"
  ":" ","
  "=" ".." "..="
  "&" "!" "->" ";"
}

@external propSource geoscriptHighlighting from "./highlight"

@detectDelim
